-- Create the table with the same structure as one of the source tables
SELECT *
INTO appleStore_description_combined
FROM appleStore_description1
WHERE 1 = 0;  

-- Insert the data from all tables into the newly created table
INSERT INTO appleStore_description_combined
SELECT * FROM appleStore_description1
UNION ALL
SELECT * FROM appleStore_description2
UNION ALL
SELECT * FROM appleStore_description3
UNION ALL
SELECT * FROM appleStore_description4;


--##EXPLORATORY DATA ANALYSIS

-- Check the number of unique apps in both tables

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM appleStore_description_combined

--Check for any missing values in key fields

SELECT COUNT(*) AS MissingValues
FROM AppleStore
WHERE track_name IS null OR user_rating IS null OR prime_genre IS NULL

SELECT COUNT(*) AS MissingValues
FROM appleStore_description_combined
WHERE app_desc IS null

-- Find out the number of apps per genre

SELECT prime_genre, COUNT(*) AS NumApps
FROM AppleStore
GROUP BY prime_genre
ORDER BY NumApps DESC

-- Get an overview of the apps' ratings

SELECT MIN(user_rating) AS MinRating,
	MAX(user_rating) AS MaxRating,
	AVG(user_rating) AS AvgRating
FROM AppleStore


--##DATA ANALYSIS

--Determine wether paid apps have higher ratings than free apps

SELECT CASE
		WHEN price > 0 THEN 'Paid'
		ELSE 'Free'
	END AS App_Type,
	AVG(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY 
    CASE
        WHEN price > 0 THEN 'Paid'
        ELSE 'Free'
    END;

--Check if apps with more supported languages have higher ratings

SELECT CASE
		WHEN lang_num < 10 THEN '<10 languages'
		WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 languages'
		ELSE '>30 languages'
	END AS language_bucket,
	AVG(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY 
	CASE
		WHEN lang_num < 10 THEN '<10 languages'
		WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 languages' 
		ELSE '>30 languages'
	END
	ORDER BY Avg_Rating DESC;

--Check genres with low ratings

SELECT TOP 10
	prime_genre,
	AVG(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY prime_genre
ORDER BY Avg_Rating ASC

--Check if there is correlation between the length of the app description and the user rating

SELECT CASE
		WHEN LEN(app_desc) < 500 THEN 'Short'
		WHEN LEN(app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
		ELSE 'Long'
	END AS description_length_bucket,
	AVG(user_rating) AS average_rating
FROM AppleStore as A
JOIN appleStore_description_combined AS b
ON a.id = b.id

GROUP BY 
	CASE
		WHEN LEN(app_desc) < 500 THEN 'Short'
		WHEN LEN(app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
		ELSE 'Long'
	END
ORDER BY average_rating DESC;

--Check the top rated apps for each genre 

SELECT
	prime_genre,
	track_name,
	user_rating
FROM (
	SELECT
		prime_genre,
		track_name,
		user_rating,
		RANK() OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) AS rank
		FROM AppleStore
	)
	AS a
WHERE
a.rank = 1
